AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: iBox - iPlanner API

Globals:
  Api:
    OpenApiVersion: '2.0'

Resources:
  TodoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "Id"
          AttributeType: "S"
        - AttributeName: "CreatedBy"
          AttributeType: "S"
        - AttributeName: "TodoStatus"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "Id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "iplanner-todolist"
      GlobalSecondaryIndexes:
        - IndexName: "CreatorTodoList-GSI"
          KeySchema:
            - AttributeName: "CreatedBy"
              KeyType: "HASH"
            - AttributeName: "TodoStatus"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: '5'
            WriteCapacityUnits: '5'
  ActivityTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "Id"
          AttributeType: "S"
        - AttributeName: "CreatedBy"
          AttributeType: "S"
        - AttributeName: "ActivityStatus"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "Id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "iplanner-activities"
      GlobalSecondaryIndexes:
        - IndexName: "CreatorActivities-GSI"
          KeySchema:
            - AttributeName: "CreatedBy"
              KeyType: "HASH"
            - AttributeName: "ActivityStatus"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: '5'
            WriteCapacityUnits: '5'
  AddTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ibox.iplanner.api.lambda.AddTodoHandlerWrapper::handleRequest
      Runtime: java8
      Timeout: 50
      MemorySize: 512
      CodeUri: target/iplanner-api-1.0-SNAPSHOT.jar
      Role: arn:aws:iam::529599130512:role/li.ibox.iplanner.lambda.role
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodoTable
      Environment:
        Variables:
          TABLE_NAME: !Ref TodoTable
      Events:
        AddTodoApi:
          Type: Api
          Properties:
            Path: /todos
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi
  GetTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ibox.iplanner.api.lambda.GetTodoHandlerWrapper::handleRequest
      Runtime: java8
      Timeout: 50
      MemorySize: 512
      CodeUri: target/iplanner-api-1.0-SNAPSHOT.jar
      Role: arn:aws:iam::529599130512:role/li.ibox.iplanner.lambda.role
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TodoTable
      Environment:
        Variables:
          TABLE_NAME: !Ref TodoTable
      Events:
        GetTodoByIdApi:
          Type: Api
          Properties:
            Path: /events/{id}
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi
  ListTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ibox.iplanner.api.lambda.ListTodoHandlerWrapper::handleRequest
      Runtime: java8
      Timeout: 50
      MemorySize: 512
      CodeUri: target/iplanner-api-1.0-SNAPSHOT.jar
      Role: arn:aws:iam::529599130512:role/li.ibox.iplanner.lambda.role
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TodoTable
      Environment:
        Variables:
          TABLE_NAME: !Ref TodoTable
      Events:
        ListTodoApi:
          Type: Api
          Properties:
            Path: /events/createdBy/{creatorId}
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi
  UpdateTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ibox.iplanner.api.lambda.UpdateTodoHandlerWrapper::handleRequest
      Runtime: java8
      Timeout: 50
      MemorySize: 512
      CodeUri: target/iplanner-api-1.0-SNAPSHOT.jar
      Role: arn:aws:iam::529599130512:role/li.ibox.iplanner.lambda.role
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TodoTable
      Environment:
        Variables:
          TABLE_NAME: !Ref TodoTable
      Events:
        UpdateTodoApi:
          Type: Api
          Properties:
            Path: /events/{creatorId}
            Method: PUT
            RestApiId:
              Ref: ApiGatewayApi
  DeleteTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ibox.iplanner.api.lambda.DeleteTodoHandlerWrapper::handleRequest
      Runtime: java8
      Timeout: 50
      MemorySize: 512
      CodeUri: target/iplanner-api-1.0-SNAPSHOT.jar
      Role: arn:aws:iam::529599130512:role/li.ibox.iplanner.lambda.role
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TodoTable
      Environment:
        Variables:
          TABLE_NAME: !Ref TodoTable
      Events:
        DeleteTodoApi:
          Type: Api
          Properties:
            Path: /events/{creatorId}
            Method: DELETE
            RestApiId:
              Ref: ApiGatewayApi
  AddActivityFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ibox.iplanner.api.lambda.AddActivityHandlerWrapper::handleRequest
      Runtime: java8
      Timeout: 50
      MemorySize: 512
      CodeUri: target/iplanner-api-1.0-SNAPSHOT.jar
      Role: arn:aws:iam::529599130512:role/li.ibox.iplanner.lambda.role
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ActivityTable
      Environment:
        Variables:
          TABLE_NAME: !Ref ActivityTable
      Events:
        AddTodoApi:
          Type: Api
          Properties:
            Path: /activities
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi
  GetActivityFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ibox.iplanner.api.lambda.GetActivityHandlerWrapper::handleRequest
      Runtime: java8
      Timeout: 50
      MemorySize: 512
      CodeUri: target/iplanner-api-1.0-SNAPSHOT.jar
      Role: arn:aws:iam::529599130512:role/li.ibox.iplanner.lambda.role
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ActivityTable
      Environment:
        Variables:
          TABLE_NAME: !Ref ActivityTable
      Events:
        GetTodoByIdApi:
          Type: Api
          Properties:
            Path: /activities/{id}
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi
  ListActivityFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ibox.iplanner.api.lambda.ListActivityHandlerWrapper::handleRequest
      Runtime: java8
      Timeout: 50
      MemorySize: 512
      CodeUri: target/iplanner-api-1.0-SNAPSHOT.jar
      Role: arn:aws:iam::529599130512:role/li.ibox.iplanner.lambda.role
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ActivityTable
      Environment:
        Variables:
          TABLE_NAME: !Ref ActivityTable
      Events:
        ListActivityApi:
          Type: Api
          Properties:
            Path: /activities/createdBy/{creatorId}
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi
  UpdateActivityFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ibox.iplanner.api.lambda.UpdateActivityHandlerWrapper::handleRequest
      Runtime: java8
      Timeout: 50
      MemorySize: 512
      CodeUri: target/iplanner-api-1.0-SNAPSHOT.jar
      Role: arn:aws:iam::529599130512:role/li.ibox.iplanner.lambda.role
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ActivityTable
      Environment:
        Variables:
          TABLE_NAME: !Ref ActivityTable
      Events:
        UpdateTodoApi:
          Type: Api
          Properties:
            Path: /activities/{creatorId}
            Method: PUT
            RestApiId:
              Ref: ApiGatewayApi
  DeleteActivityFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ibox.iplanner.api.lambda.DeleteActivityHandlerWrapper::handleRequest
      Runtime: java8
      Timeout: 50
      MemorySize: 512
      CodeUri: target/iplanner-api-1.0-SNAPSHOT.jar
      Role: arn:aws:iam::529599130512:role/li.ibox.iplanner.lambda.role
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ActivityTable
      Environment:
        Variables:
          TABLE_NAME: !Ref ActivityTable
      Events:
        DeleteTodoApi:
          Type: Api
          Properties:
            Path: /activities/{creatorId}
            Method: DELETE
            RestApiId:
              Ref: ApiGatewayApi
  GetEntityDefinitionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ibox.iplanner.api.lambda.GetEntityDefinitionHandlerWrapper::handleRequest
      Runtime: java8
      Timeout: 50
      MemorySize: 512
      CodeUri: target/iplanner-api-1.0-SNAPSHOT.jar
      Role: arn:aws:iam::529599130512:role/li.ibox.iplanner.lambda.role
      Events:
        GetEntityDefinitionApi:
          Type: Api
          Properties:
            Path: /entityDef
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi
  GetActivityTemplateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ibox.iplanner.api.lambda.GetActivityTemplateHandlerWrapper::handleRequest
      Runtime: java8
      Timeout: 50
      MemorySize: 512
      CodeUri: target/iplanner-api-1.0-SNAPSHOT.jar
      Role: arn:aws:iam::529599130512:role/li.ibox.iplanner.lambda.role
      Events:
        GetActivityTemplateApi:
          Type: Api
          Properties:
            Path: /activities/template
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi
  CreateTodoFromActivityFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ibox.iplanner.api.lambda.CreateTodoFromActivityHandlerWrapper::handleRequest
      Runtime: java8
      Timeout: 50
      MemorySize: 512
      CodeUri: target/iplanner-api-1.0-SNAPSHOT.jar
      Role: arn:aws:iam::529599130512:role/li.ibox.iplanner.lambda.role
      Events:
        CreateTodoFromActivityApi:
          Type: Api
          Properties:
            Path: /events/activity/{activityId}
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        openapi: "3.0.0"
        info:
          title: iPlanner API
          version: 1.0.0
        paths:
          /todos:
            post:
              summary: Create one or multiple todos
              operationId: createTodos
              tags:
                - todos
              responses:
                '201':
                  description: Null response
                default:
                  description: unexpected error
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Error"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddTodoFunction.Arn}/invocations
                responses: {}
                httpMethod: "POST"
                type: "aws_proxy"
            put:
              summary: To update a specific todo
              operationId: updateTodo
              tags:
                - todos
              responses:
                '200':
                  description: Expected response to a valid request
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Todo"
                default:
                  description: unexpected error
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Error"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateTodoFunction.Arn}/invocations
                responses: {}
                httpMethod: "PUT"
                type: "aws_proxy"
          /todos/activity/{activityId}:
            post:
              summary: Create an Todo based on the specified Activity
              operationId: createTodoFromActivity
              tags:
                - todos
              parameters:
                - in: path
                  name: activityId
                  required: true
                  description: The id of the activity to model the todo after
                  schema:
                    type: string
              responses:
                '200':
                  description: Expected response to a valid request
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Todo"
                '201':
                  description: Null response
                default:
                  description: unexpected error
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Error"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateTodoFromActivityFunction.Arn}/invocations
                responses: {}
                httpMethod: "POST"
                type: "aws_proxy"
          /todos/{id}:
            get:
              summary: Info for a specific todo
              operationId: getTodoById
              tags:
                - todos
              parameters:
                - in: path
                  name: id
                  required: true
                  description: The id of the todo to retrieve
                  schema:
                    type: string
              responses:
                '200':
                  description: Expected response to a valid request
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Todo"
                default:
                  description: unexpected error
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Error"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTodoFunction.Arn}/invocations
                responses: {}
                httpMethod: "GET"
                type: "aws_proxy"
            delete:
              summary: To remove a specific todo
              operationId: deleteTodoById
              tags:
                - todos
              parameters:
                - in: path
                  name: id
                  required: true
                  description: The id of the todo to remove
                  schema:
                    type: string
              responses:
                '200':
                  description: Expected response to a valid request
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Todo"
                default:
                  description: unexpected error
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Error"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteTodoFunction.Arn}/invocations
                responses: {}
                httpMethod: "DELETE"
                type: "aws_proxy"
          /todos/createdBy/{creatorId}:
            get:
              summary: A list of todos that satisfy the search criteria
              operationId: listTodos
              tags:
                - todos
              parameters:
                - in: path
                  name: creatorId
                  required: true
                  description: The user id of the todo creator
                  schema:
                    type: string
                - in: query
                  name: activities
                  required: false
                  description: A list of activity ids (seperated by commas) that the returned todos should match against
                  schema:
                    type: string
                - name: status
                  in: query
                  required: false
                  description: Limiting by the status of the todo
                  schema:
                    type: string
                - name: limit
                  in: query
                  required: false
                  description: Limiting the number of results to be returned
                  schema:
                    type: string
              responses:
                '200':
                  description: Expected response to a valid request
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Todos"
                default:
                  description: unexpected error
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Error"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListTodoFunction.Arn}/invocations
                responses: {}
                httpMethod: "GET"
                type: "aws_proxy"
          /activities:
            post:
              summary: Create one or multiple activities
              operationId: createActivities
              tags:
                - activities
              responses:
                '201':
                  description: Null response
                default:
                  description: unexpected error
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Error"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddActivityFunction.Arn}/invocations
                responses: {}
                httpMethod: "POST"
                type: "aws_proxy"
            put:
              summary: To update a specific activity
              operationId: updateActivity
              tags:
                - activities
              responses:
                '200':
                  description: Expected response to a valid request
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Activity"
                default:
                  description: unexpected error
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Error"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateActivityFunction.Arn}/invocations
                responses: {}
                httpMethod: "PUT"
                type: "aws_proxy"
          /activities/{id}:
            get:
              summary: Info for a specific activity
              operationId: getActivityById
              tags:
                - activities
              parameters:
                - name: id
                  in: path
                  required: true
                  description: The id of the activity to retrieve
                  schema:
                    type: string
              responses:
                '200':
                  description: Expected response to a valid request
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Activity"
                default:
                  description: unexpected error
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Error"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetActivityFunction.Arn}/invocations
                responses: {}
                httpMethod: "GET"
                type: "aws_proxy"
            delete:
              summary: To remove a specific activity
              operationId: deleteActivityById
              tags:
                - activities
              parameters:
                - name: id
                  in: path
                  required: true
                  description: The id of the activity to remove
                  schema:
                    type: string
              responses:
                '200':
                  description: Expected response to a valid request
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Activity"
                default:
                  description: unexpected error
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Error"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteActivityFunction.Arn}/invocations
                responses: {}
                httpMethod: "DELETE"
                type: "aws_proxy"
          /activities/createdBy/{creatorId}:
            get:
              summary: A list of activities that satisfy the search criteria
              operationId: listActivities
              tags:
                - activities
              parameters:
                - name: creatorId
                  in: path
                  required: true
                  description: The user id of the activity creator
                  schema:
                    type: string
                - name: status
                  in: query
                  required: false
                  description: Limiting by the status of the activity
                  schema:
                    type: string
                - name: limit
                  in: query
                  required: false
                  description: Limiting the number of results to be returned
                  schema:
                    type: string
              responses:
                '200':
                  description: Expected response to a valid request
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Activities"
                default:
                  description: unexpected error
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Error"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListActivityFunction.Arn}/invocations
                responses: {}
                httpMethod: "GET"
                type: "aws_proxy"
          /activities/template:
            post:
              summary: A list of template activities by specified names
              operationId: templateActivities
              tags:
                - activities
              responses:
                '200':
                  description: Expected response to a valid request
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Activities"
                default:
                  description: unexpected error
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Error"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetActivityTemplateFunction.Arn}/invocations
                responses: {}
                httpMethod: "POST"
                type: "aws_proxy"
          /entityDef:
            get:
              summary: A the json schema definition of the specified entity
              operationId: getEntityDefinition
              tags:
                - entityDef
              parameters:
                - name: type
                  in: query
                  required: true
                  description: The entity name
                  schema:
                    type: string
              responses:
                '200':
                  description: Expected response to a valid request
                default:
                  description: unexpected error
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Error"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetEntityDefinitionFunction.Arn}/invocations
                responses: {}
                httpMethod: "GET"
                type: "aws_proxy"
        components:
          schemas:
            Todo:
              required:
                - summary
                - creator
                - activityId
                - activityType
              properties:
                id:
                  type: integer
                  format: int64
                summary:
                  type: string
                description:
                  type: string
                creator:
                  $ref: "#/components/schemas/User"
                created:
                  example: 1995-09-07T10:40:52Z
                  format: date-time
                  type: string
                updated:
                  example: 1995-09-07T10:40:52Z
                  format: date-time
                  type: string
                activityId:
                  type: string
                activityType:
                  type: string
                status:
                  type: string
                eventInfo:
                  type:
                    - $ref: "#/components/schemas/EventAttribute"
                    - 'null'
                locationInfo:
                  type:
                    - $ref: "#/components/schemas/LocationAttribute"
                    - 'null'
                tags:
                  type:
                    - $ref: "#/components/schemas/TagAttribute"
                    - 'null'
                timeline:
                  type:
                    - $ref: "#/components/schemas/TimelineAttribute"
                    - 'null'
            Todos:
              type: array
              items:
                $ref: "#/components/schemas/Todo"
            Activity:
              required:
                - title
                - creator
                - status
                - activityType
              properties:
                id:
                  type: integer
                  format: int64
                title:
                  type: string
                description:
                  type: string
                creator:
                  $ref: "#/components/schemas/User"
                created:
                  example: 1995-09-07T10:40:52Z
                  format: date-time
                  type: string
                updated:
                  example: 1995-09-07T10:40:52Z
                  format: date-time
                  type: string
                activityType:
                  type: string
                status:
                  type: string
                eventInfo:
                  type:
                    - $ref: "#/components/schemas/EventAttribute"
                    - 'null'
                locationInfo:
                  type:
                    - $ref: "#/components/schemas/LocationAttribute"
                    - 'null'
                tags:
                  type:
                    - $ref: "#/components/schemas/TagAttribute"
                    - 'null'
                timeline:
                  type:
                    - $ref: "#/components/schemas/TimelineAttribute"
                    - 'null'
            Activities:
              type: array
              items:
                $ref: "#/components/schemas/Activity"
            EventAttribute:
              required:
                - start
                - end
              properties:
                start:
                  example: 1995-09-07T10:40:52Z
                  format: date-time
                  type: string
                end:
                  example: 1995-09-07T10:40:52Z
                  format: date-time
                  type: string
                frequency:
                  enum: [
                    "ONE_TIME",
                    "HOURLY",
                    "DAILY",
                    "WEEKLY",
                    "MONTHLY",
                    "ANNUALLY"
                  ]
                recurrence:
                  type: array
                  items:
                    type: string
            LocationAttribute:
              required:
                - location
              properties:
                location:
                  type: string
            TimelineAttribute:
              properties:
                startBy:
                  type: string
                completeBy:
                  type: string
            TagAttribute:
              required:
                - tags
              properties:
                tags:
                  type: array
                  items:
                    $ref: "#/components/schemas/Tag"
            Tag:
              required:
                - value
              properties:
                value:
                  type: string
                rgbHexCode:
                  type: string
            User:
              required:
                - id
                - email
                - displayName
                - self
              properties:
                id:
                  type: string
                email:
                  type: string
                displayName:
                  type: string
                self:
                  type: boolean
            Error:
              required:
                - code
                - message
              properties:
                code:
                  type: integer
                  format: int32
                message:
                  type: string
        x-amazon-apigateway-request-validators:
          Validate query string parameters and headers:
            validateRequestParameters: true
            validateRequestBody: false
