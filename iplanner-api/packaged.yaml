AWSTemplateFormatVersion: '2010-09-09'
Description: iBox - iPlanner API
Globals:
  Api:
    OpenApiVersion: '2.0'
Resources:
  ActivityTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: Id
        AttributeType: S
      - AttributeName: CreatedBy
        AttributeType: S
      - AttributeName: ActivityStatus
        AttributeType: S
      GlobalSecondaryIndexes:
      - IndexName: CreatorActivities-GSI
        KeySchema:
        - AttributeName: CreatedBy
          KeyType: HASH
        - AttributeName: ActivityStatus
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: '5'
          WriteCapacityUnits: '5'
      KeySchema:
      - AttributeName: Id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      TableName: iplanner-activities
    Type: AWS::DynamoDB::Table
  AddActivityFunction:
    Properties:
      CodeUri: s3://ibox-iplanner-bucket/326526534cad020df59f88abe712ef08
      Environment:
        Variables:
          TABLE_NAME:
            Ref: ActivityTable
      Events:
        AddTodoApi:
          Properties:
            Method: POST
            Path: /activities
            RestApiId:
              Ref: ApiGatewayApi
          Type: Api
      Handler: ibox.iplanner.api.lambda.AddActivityHandlerWrapper::handleRequest
      MemorySize: 512
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ActivityTable
      Role: arn:aws:iam::529599130512:role/li.ibox.iplanner.lambda.role
      Runtime: java8
      Timeout: 50
    Type: AWS::Serverless::Function
  AddTodoFunction:
    Properties:
      CodeUri: s3://ibox-iplanner-bucket/326526534cad020df59f88abe712ef08
      Environment:
        Variables:
          TABLE_NAME:
            Ref: TodoTable
      Events:
        AddTodoApi:
          Properties:
            Method: POST
            Path: /todos
            RestApiId:
              Ref: ApiGatewayApi
          Type: Api
      Handler: ibox.iplanner.api.lambda.AddTodoHandlerWrapper::handleRequest
      MemorySize: 512
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: TodoTable
      Role: arn:aws:iam::529599130512:role/li.ibox.iplanner.lambda.role
      Runtime: java8
      Timeout: 50
    Type: AWS::Serverless::Function
  ApiGatewayApi:
    Properties:
      DefinitionBody:
        components:
          schemas:
            Activities:
              items:
                $ref: '#/components/schemas/Activity'
              type: array
            Activity:
              properties:
                activityType:
                  type: string
                created:
                  example: 1995-09-07 10:40:52
                  format: date-time
                  type: string
                creator:
                  $ref: '#/components/schemas/User'
                description:
                  type: string
                eventInfo:
                  type:
                  - $ref: '#/components/schemas/EventAttribute'
                  - 'null'
                id:
                  format: int64
                  type: integer
                locationInfo:
                  type:
                  - $ref: '#/components/schemas/LocationAttribute'
                  - 'null'
                status:
                  type: string
                tags:
                  type:
                  - $ref: '#/components/schemas/TagAttribute'
                  - 'null'
                timeline:
                  type:
                  - $ref: '#/components/schemas/TimelineAttribute'
                  - 'null'
                title:
                  type: string
                updated:
                  example: 1995-09-07 10:40:52
                  format: date-time
                  type: string
              required:
              - title
              - creator
              - status
              - activityType
            Error:
              properties:
                code:
                  format: int32
                  type: integer
                message:
                  type: string
              required:
              - code
              - message
            EventAttribute:
              properties:
                end:
                  example: 1995-09-07 10:40:52
                  format: date-time
                  type: string
                frequency:
                  enum:
                  - ONE_TIME
                  - HOURLY
                  - DAILY
                  - WEEKLY
                  - MONTHLY
                  - ANNUALLY
                recurrence:
                  items:
                    type: string
                  type: array
                start:
                  example: 1995-09-07 10:40:52
                  format: date-time
                  type: string
              required:
              - start
              - end
            LocationAttribute:
              properties:
                location:
                  type: string
              required:
              - location
            Tag:
              properties:
                rgbHexCode:
                  type: string
                value:
                  type: string
              required:
              - value
            TagAttribute:
              properties:
                tags:
                  items:
                    $ref: '#/components/schemas/Tag'
                  type: array
              required:
              - tags
            TimelineAttribute:
              properties:
                completeBy:
                  type: string
                startBy:
                  type: string
            Todo:
              properties:
                activityId:
                  type: string
                activityType:
                  type: string
                created:
                  example: 1995-09-07 10:40:52
                  format: date-time
                  type: string
                creator:
                  $ref: '#/components/schemas/User'
                description:
                  type: string
                eventInfo:
                  type:
                  - $ref: '#/components/schemas/EventAttribute'
                  - 'null'
                id:
                  format: int64
                  type: integer
                locationInfo:
                  type:
                  - $ref: '#/components/schemas/LocationAttribute'
                  - 'null'
                status:
                  type: string
                summary:
                  type: string
                tags:
                  type:
                  - $ref: '#/components/schemas/TagAttribute'
                  - 'null'
                timeline:
                  type:
                  - $ref: '#/components/schemas/TimelineAttribute'
                  - 'null'
                updated:
                  example: 1995-09-07 10:40:52
                  format: date-time
                  type: string
              required:
              - summary
              - creator
              - activityId
              - activityType
            Todos:
              items:
                $ref: '#/components/schemas/Todo'
              type: array
            User:
              properties:
                displayName:
                  type: string
                email:
                  type: string
                id:
                  type: string
                self:
                  type: boolean
              required:
              - id
              - email
              - displayName
              - self
        info:
          title: iPlanner API
          version: 1.0.0
        openapi: 3.0.0
        paths:
          /activities:
            post:
              operationId: createActivities
              responses:
                '201':
                  description: Null response
                default:
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
                  description: unexpected error
              summary: Create one or multiple activities
              tags:
              - activities
              x-amazon-apigateway-integration:
                httpMethod: POST
                responses: {}
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddActivityFunction.Arn}/invocations
            put:
              operationId: updateActivity
              responses:
                '200':
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Activity'
                  description: Expected response to a valid request
                default:
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
                  description: unexpected error
              summary: To update a specific activity
              tags:
              - activities
              x-amazon-apigateway-integration:
                httpMethod: PUT
                responses: {}
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateActivityFunction.Arn}/invocations
          /activities/createdBy/{creatorId}:
            get:
              operationId: listActivities
              parameters:
              - description: The user id of the activity creator
                in: path
                name: creatorId
                required: true
                schema:
                  type: string
              - description: Limiting by the status of the activity
                in: query
                name: status
                required: false
                schema:
                  type: string
              - description: Limiting the number of results to be returned
                in: query
                name: limit
                required: false
                schema:
                  type: string
              responses:
                '200':
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Activities'
                  description: Expected response to a valid request
                default:
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
                  description: unexpected error
              summary: A list of activities that satisfy the search criteria
              tags:
              - activities
              x-amazon-apigateway-integration:
                httpMethod: GET
                responses: {}
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListActivityFunction.Arn}/invocations
          /activities/template:
            post:
              operationId: templateActivities
              responses:
                '200':
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Activities'
                  description: Expected response to a valid request
                default:
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
                  description: unexpected error
              summary: A list of template activities by specified names
              tags:
              - activities
              x-amazon-apigateway-integration:
                httpMethod: POST
                responses: {}
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetActivityTemplateFunction.Arn}/invocations
          /activities/{id}:
            delete:
              operationId: deleteActivityById
              parameters:
              - description: The id of the activity to remove
                in: path
                name: id
                required: true
                schema:
                  type: string
              responses:
                '200':
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Activity'
                  description: Expected response to a valid request
                default:
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
                  description: unexpected error
              summary: To remove a specific activity
              tags:
              - activities
              x-amazon-apigateway-integration:
                httpMethod: DELETE
                responses: {}
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteActivityFunction.Arn}/invocations
            get:
              operationId: getActivityById
              parameters:
              - description: The id of the activity to retrieve
                in: path
                name: id
                required: true
                schema:
                  type: string
              responses:
                '200':
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Activity'
                  description: Expected response to a valid request
                default:
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
                  description: unexpected error
              summary: Info for a specific activity
              tags:
              - activities
              x-amazon-apigateway-integration:
                httpMethod: GET
                responses: {}
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetActivityFunction.Arn}/invocations
          /entityDef:
            get:
              operationId: getEntityDefinition
              parameters:
              - description: The entity name
                in: query
                name: type
                required: true
                schema:
                  type: string
              responses:
                '200':
                  description: Expected response to a valid request
                default:
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
                  description: unexpected error
              summary: A the json schema definition of the specified entity
              tags:
              - entityDef
              x-amazon-apigateway-integration:
                httpMethod: GET
                responses: {}
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetEntityDefinitionFunction.Arn}/invocations
          /todos:
            post:
              operationId: createTodos
              responses:
                '201':
                  description: Null response
                default:
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
                  description: unexpected error
              summary: Create one or multiple todos
              tags:
              - todos
              x-amazon-apigateway-integration:
                httpMethod: POST
                responses: {}
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddTodoFunction.Arn}/invocations
            put:
              operationId: updateTodo
              responses:
                '200':
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Todo'
                  description: Expected response to a valid request
                default:
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
                  description: unexpected error
              summary: To update a specific todo
              tags:
              - todos
              x-amazon-apigateway-integration:
                httpMethod: PUT
                responses: {}
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateTodoFunction.Arn}/invocations
          /todos/activity/{activityId}:
            post:
              operationId: createTodoFromActivity
              parameters:
              - description: The id of the activity to model the todo after
                in: path
                name: activityId
                required: true
                schema:
                  type: string
              responses:
                '200':
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Todo'
                  description: Expected response to a valid request
                '201':
                  description: Null response
                default:
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
                  description: unexpected error
              summary: Create an Todo based on the specified Activity
              tags:
              - todos
              x-amazon-apigateway-integration:
                httpMethod: POST
                responses: {}
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateTodoFromActivityFunction.Arn}/invocations
          /todos/createdBy/{creatorId}:
            get:
              operationId: listTodos
              parameters:
              - description: The user id of the todo creator
                in: path
                name: creatorId
                required: true
                schema:
                  type: string
              - description: A list of activity ids (seperated by commas) that the
                  returned todos should match against
                in: query
                name: activities
                required: false
                schema:
                  type: string
              - description: Limiting by the status of the todo
                in: query
                name: status
                required: false
                schema:
                  type: string
              - description: Limiting the number of results to be returned
                in: query
                name: limit
                required: false
                schema:
                  type: string
              responses:
                '200':
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Todos'
                  description: Expected response to a valid request
                default:
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
                  description: unexpected error
              summary: A list of todos that satisfy the search criteria
              tags:
              - todos
              x-amazon-apigateway-integration:
                httpMethod: GET
                responses: {}
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListTodoFunction.Arn}/invocations
          /todos/{id}:
            delete:
              operationId: deleteTodoById
              parameters:
              - description: The id of the todo to remove
                in: path
                name: id
                required: true
                schema:
                  type: string
              responses:
                '200':
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Todo'
                  description: Expected response to a valid request
                default:
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
                  description: unexpected error
              summary: To remove a specific todo
              tags:
              - todos
              x-amazon-apigateway-integration:
                httpMethod: DELETE
                responses: {}
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteTodoFunction.Arn}/invocations
            get:
              operationId: getTodoById
              parameters:
              - description: The id of the todo to retrieve
                in: path
                name: id
                required: true
                schema:
                  type: string
              responses:
                '200':
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Todo'
                  description: Expected response to a valid request
                default:
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
                  description: unexpected error
              summary: Info for a specific todo
              tags:
              - todos
              x-amazon-apigateway-integration:
                httpMethod: GET
                responses: {}
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTodoFunction.Arn}/invocations
        x-amazon-apigateway-request-validators:
          Validate query string parameters and headers:
            validateRequestBody: false
            validateRequestParameters: true
      EndpointConfiguration: REGIONAL
      StageName: dev
    Type: AWS::Serverless::Api
  CreateTodoFromActivityFunction:
    Properties:
      CodeUri: s3://ibox-iplanner-bucket/326526534cad020df59f88abe712ef08
      Events:
        CreateTodoFromActivityApi:
          Properties:
            Method: GET
            Path: /events/activity/{activityId}
            RestApiId:
              Ref: ApiGatewayApi
          Type: Api
      Handler: ibox.iplanner.api.lambda.CreateTodoFromActivityHandlerWrapper::handleRequest
      MemorySize: 512
      Role: arn:aws:iam::529599130512:role/li.ibox.iplanner.lambda.role
      Runtime: java8
      Timeout: 50
    Type: AWS::Serverless::Function
  DeleteActivityFunction:
    Properties:
      CodeUri: s3://ibox-iplanner-bucket/326526534cad020df59f88abe712ef08
      Environment:
        Variables:
          TABLE_NAME:
            Ref: ActivityTable
      Events:
        DeleteTodoApi:
          Properties:
            Method: DELETE
            Path: /activities/{creatorId}
            RestApiId:
              Ref: ApiGatewayApi
          Type: Api
      Handler: ibox.iplanner.api.lambda.DeleteActivityHandlerWrapper::handleRequest
      MemorySize: 512
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: ActivityTable
      Role: arn:aws:iam::529599130512:role/li.ibox.iplanner.lambda.role
      Runtime: java8
      Timeout: 50
    Type: AWS::Serverless::Function
  DeleteTodoFunction:
    Properties:
      CodeUri: s3://ibox-iplanner-bucket/326526534cad020df59f88abe712ef08
      Environment:
        Variables:
          TABLE_NAME:
            Ref: TodoTable
      Events:
        DeleteTodoApi:
          Properties:
            Method: DELETE
            Path: /events/{creatorId}
            RestApiId:
              Ref: ApiGatewayApi
          Type: Api
      Handler: ibox.iplanner.api.lambda.DeleteTodoHandlerWrapper::handleRequest
      MemorySize: 512
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: TodoTable
      Role: arn:aws:iam::529599130512:role/li.ibox.iplanner.lambda.role
      Runtime: java8
      Timeout: 50
    Type: AWS::Serverless::Function
  GetActivityFunction:
    Properties:
      CodeUri: s3://ibox-iplanner-bucket/326526534cad020df59f88abe712ef08
      Environment:
        Variables:
          TABLE_NAME:
            Ref: ActivityTable
      Events:
        GetTodoByIdApi:
          Properties:
            Method: GET
            Path: /activities/{id}
            RestApiId:
              Ref: ApiGatewayApi
          Type: Api
      Handler: ibox.iplanner.api.lambda.GetActivityHandlerWrapper::handleRequest
      MemorySize: 512
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: ActivityTable
      Role: arn:aws:iam::529599130512:role/li.ibox.iplanner.lambda.role
      Runtime: java8
      Timeout: 50
    Type: AWS::Serverless::Function
  GetActivityTemplateFunction:
    Properties:
      CodeUri: s3://ibox-iplanner-bucket/326526534cad020df59f88abe712ef08
      Events:
        GetActivityTemplateApi:
          Properties:
            Method: POST
            Path: /activities/template
            RestApiId:
              Ref: ApiGatewayApi
          Type: Api
      Handler: ibox.iplanner.api.lambda.GetActivityTemplateHandlerWrapper::handleRequest
      MemorySize: 512
      Role: arn:aws:iam::529599130512:role/li.ibox.iplanner.lambda.role
      Runtime: java8
      Timeout: 50
    Type: AWS::Serverless::Function
  GetEntityDefinitionFunction:
    Properties:
      CodeUri: s3://ibox-iplanner-bucket/326526534cad020df59f88abe712ef08
      Events:
        GetEntityDefinitionApi:
          Properties:
            Method: GET
            Path: /entityDef
            RestApiId:
              Ref: ApiGatewayApi
          Type: Api
      Handler: ibox.iplanner.api.lambda.GetEntityDefinitionHandlerWrapper::handleRequest
      MemorySize: 512
      Role: arn:aws:iam::529599130512:role/li.ibox.iplanner.lambda.role
      Runtime: java8
      Timeout: 50
    Type: AWS::Serverless::Function
  GetTodoFunction:
    Properties:
      CodeUri: s3://ibox-iplanner-bucket/326526534cad020df59f88abe712ef08
      Environment:
        Variables:
          TABLE_NAME:
            Ref: TodoTable
      Events:
        GetTodoByIdApi:
          Properties:
            Method: GET
            Path: /events/{id}
            RestApiId:
              Ref: ApiGatewayApi
          Type: Api
      Handler: ibox.iplanner.api.lambda.GetTodoHandlerWrapper::handleRequest
      MemorySize: 512
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: TodoTable
      Role: arn:aws:iam::529599130512:role/li.ibox.iplanner.lambda.role
      Runtime: java8
      Timeout: 50
    Type: AWS::Serverless::Function
  ListActivityFunction:
    Properties:
      CodeUri: s3://ibox-iplanner-bucket/326526534cad020df59f88abe712ef08
      Environment:
        Variables:
          TABLE_NAME:
            Ref: ActivityTable
      Events:
        ListActivityApi:
          Properties:
            Method: GET
            Path: /activities/createdBy/{creatorId}
            RestApiId:
              Ref: ApiGatewayApi
          Type: Api
      Handler: ibox.iplanner.api.lambda.ListActivityHandlerWrapper::handleRequest
      MemorySize: 512
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: ActivityTable
      Role: arn:aws:iam::529599130512:role/li.ibox.iplanner.lambda.role
      Runtime: java8
      Timeout: 50
    Type: AWS::Serverless::Function
  ListTodoFunction:
    Properties:
      CodeUri: s3://ibox-iplanner-bucket/326526534cad020df59f88abe712ef08
      Environment:
        Variables:
          TABLE_NAME:
            Ref: TodoTable
      Events:
        ListTodoApi:
          Properties:
            Method: GET
            Path: /events/createdBy/{creatorId}
            RestApiId:
              Ref: ApiGatewayApi
          Type: Api
      Handler: ibox.iplanner.api.lambda.ListTodoHandlerWrapper::handleRequest
      MemorySize: 512
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: TodoTable
      Role: arn:aws:iam::529599130512:role/li.ibox.iplanner.lambda.role
      Runtime: java8
      Timeout: 50
    Type: AWS::Serverless::Function
  TodoTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: Id
        AttributeType: S
      - AttributeName: CreatedBy
        AttributeType: S
      - AttributeName: TodoStatus
        AttributeType: S
      GlobalSecondaryIndexes:
      - IndexName: CreatorTodoList-GSI
        KeySchema:
        - AttributeName: CreatedBy
          KeyType: HASH
        - AttributeName: TodoStatus
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: '5'
          WriteCapacityUnits: '5'
      KeySchema:
      - AttributeName: Id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      TableName: iplanner-todolist
    Type: AWS::DynamoDB::Table
  UpdateActivityFunction:
    Properties:
      CodeUri: s3://ibox-iplanner-bucket/326526534cad020df59f88abe712ef08
      Environment:
        Variables:
          TABLE_NAME:
            Ref: ActivityTable
      Events:
        UpdateTodoApi:
          Properties:
            Method: PUT
            Path: /activities/{creatorId}
            RestApiId:
              Ref: ApiGatewayApi
          Type: Api
      Handler: ibox.iplanner.api.lambda.UpdateActivityHandlerWrapper::handleRequest
      MemorySize: 512
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: ActivityTable
      Role: arn:aws:iam::529599130512:role/li.ibox.iplanner.lambda.role
      Runtime: java8
      Timeout: 50
    Type: AWS::Serverless::Function
  UpdateTodoFunction:
    Properties:
      CodeUri: s3://ibox-iplanner-bucket/326526534cad020df59f88abe712ef08
      Environment:
        Variables:
          TABLE_NAME:
            Ref: TodoTable
      Events:
        UpdateTodoApi:
          Properties:
            Method: PUT
            Path: /events/{creatorId}
            RestApiId:
              Ref: ApiGatewayApi
          Type: Api
      Handler: ibox.iplanner.api.lambda.UpdateTodoHandlerWrapper::handleRequest
      MemorySize: 512
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: TodoTable
      Role: arn:aws:iam::529599130512:role/li.ibox.iplanner.lambda.role
      Runtime: java8
      Timeout: 50
    Type: AWS::Serverless::Function
Transform: AWS::Serverless-2016-10-31
